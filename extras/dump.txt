    // const DownloadContent = () => {
    //     const doc = new jsPDF();
    //     const contentWidth = doc.internal.pageSize.getWidth();
    //     const contentHeight = doc.internal.pageSize.getHeight();
    //     const html = NoteRef.current.innerHTML;

    //     NoteRef.current.style.height = `${contentHeight}mm`;

    //     doc.html(html, {
    //         callback: function (doc) { doc.save('Notes.pdf') },
    //         margin: [10, 10, 10, 10],
    //         autoPaging: 'text',
    //         x: 0,
    //         y: 0,
    //         width: contentWidth,
    //         windowWidth: contentWidth,
    //         fontSize: 4,
    //     });

    //     NoteRef.current.style.height = 'auto';
    // };
    // const DownloadContent = () => {
    //     const doc = new jsPDF();
    //     const contentWidth = doc.internal.pageSize.getWidth();
    //     const contentHeight = doc.internal.pageSize.getHeight();
    //     const html = NoteRef.current.innerHTML;

    //     NoteRef.current.style.height = `${contentHeight}mm`;

    //     doc.html(html, {
    //         callback: function (doc) { doc.save('Notes.pdf') },
    //         margin: [10, 10, 10, 10],
    //         autoPaging: 'text',
    //         x: 0,
    //         y: 0,
    //         width: contentWidth,
    //         windowWidth: contentWidth,
    //         fontSize: 12,
    //     });

    //     NoteRef.current.style.height = 'auto';
    // };

        const DownloadContent = () => {
        // const doc = new jsPDF();

        // doc.html(NoteRef.current, {
        //     callback: function (doc) {
        //         doc.save('Notes.pdf');
        //     },
        //     margin: [10, 10, 10, 10],
        //     autoPaging: 'text',
        //     x: 0,
        //     y: 0,
        //     width: 190,
        //     windowWidth: 675
        // });
        const options = {
            margin: 10,
            filename: 'Notes.pdf',
            image: { type: 'jpeg', quality: 0.98 },
            html2canvas: { scale: 2 },
            jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' },
        };

        htmlToPdf(NoteRef.current, options);
    }

            e.preventDefault();
        const sanitizedText = sanitizeText(note);
        console.log(sanitizedText);
        setrenderingText(sanitizedText);


        <div class="fixed left-0 top-0 w-full h-10 bg-red-500 text-white flex justify-center items-center">
  <span class="mx-4">This is an alert message</span>
</div>


---------------------------------------------------------------------------------


            switch (filterStatus) {
                case 'all':
                    const queryAll = await getDocs(collectionRef)
                    const all = queryAll.docs.map(doc => ({ ...doc.data(), id: doc.id }))
                    console.log(all)
                    setYouapps(all)
                    break;

                case 'wishlist':
                    const queryWishlist = await getDocs(collectionRef, where("status", "==", "wishlist"))
                    const wishlist = queryWishlist.docs.map(doc => ({ ...doc.data(), id: doc.id }))
                    console.log(wishlist)
                    setYouapps(wishlist)
                    break;

                case 'applied':
                    const queryApplied = await getDocs(collectionRef, where("status", "==", "applied"))
                    const applied = queryApplied.docs.map(doc => ({ ...doc.data(), id: doc.id }))
                    console.log(applied)
                    setYouapps(applied)
                    break;

                case 'interview':
                    const queryInterview = await getDocs(collectionRef, where("status", "==", "interview"))
                    const interview = queryInterview.docs.map(doc => ({ ...doc.data(), id: doc.id }))
                    console.log(interview)
                    setYouapps(interview)
                    break;

                case 'offer':
                    const queryOffer = await getDocs(collectionRef, where("status", "==", "offer"))
                    const offer = queryOffer.docs.map(doc => ({ ...doc.data(), id: doc.id }))
                    console.log(offer)
                    setYouapps(offer)
                    break;

                case 'rejected':
                    const queryRejected = await getDocs(collectionRef, where("status", "==", "rejected"))
                    const rejected = queryRejected.docs.map(doc => ({ ...doc.data(), id: doc.id }))
                    console.log(rejected)
                    setYouapps(rejected)
                    break;

                default:
                    break;
            }